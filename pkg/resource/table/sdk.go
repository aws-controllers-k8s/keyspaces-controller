// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package table

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/keyspaces"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/keyspaces-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.Keyspaces{}
	_ = &svcapitypes.Table{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetTableOutput
	resp, err = rm.sdkapi.GetTableWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetTable", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CapacitySpecification != nil {
		f0 := &svcapitypes.CapacitySpecification{}
		if resp.CapacitySpecification.ReadCapacityUnits != nil {
			f0.ReadCapacityUnits = resp.CapacitySpecification.ReadCapacityUnits
		}
		if resp.CapacitySpecification.ThroughputMode != nil {
			f0.ThroughputMode = resp.CapacitySpecification.ThroughputMode
		}
		if resp.CapacitySpecification.WriteCapacityUnits != nil {
			f0.WriteCapacityUnits = resp.CapacitySpecification.WriteCapacityUnits
		}
		ko.Spec.CapacitySpecification = f0
	} else {
		ko.Spec.CapacitySpecification = nil
	}
	if resp.ClientSideTimestamps != nil {
		f1 := &svcapitypes.ClientSideTimestamps{}
		if resp.ClientSideTimestamps.Status != nil {
			f1.Status = resp.ClientSideTimestamps.Status
		}
		ko.Spec.ClientSideTimestamps = f1
	} else {
		ko.Spec.ClientSideTimestamps = nil
	}
	if resp.Comment != nil {
		f2 := &svcapitypes.Comment{}
		if resp.Comment.Message != nil {
			f2.Message = resp.Comment.Message
		}
		ko.Spec.Comment = f2
	} else {
		ko.Spec.Comment = nil
	}
	if resp.DefaultTimeToLive != nil {
		ko.Spec.DefaultTimeToLive = resp.DefaultTimeToLive
	} else {
		ko.Spec.DefaultTimeToLive = nil
	}
	if resp.EncryptionSpecification != nil {
		f5 := &svcapitypes.EncryptionSpecification{}
		if resp.EncryptionSpecification.KmsKeyIdentifier != nil {
			f5.KMSKeyIdentifier = resp.EncryptionSpecification.KmsKeyIdentifier
		}
		if resp.EncryptionSpecification.Type != nil {
			f5.Type = resp.EncryptionSpecification.Type
		}
		ko.Spec.EncryptionSpecification = f5
	} else {
		ko.Spec.EncryptionSpecification = nil
	}
	if resp.KeyspaceName != nil {
		ko.Spec.KeyspaceName = resp.KeyspaceName
	} else {
		ko.Spec.KeyspaceName = nil
	}
	if resp.PointInTimeRecovery != nil {
		f7 := &svcapitypes.PointInTimeRecovery{}
		if resp.PointInTimeRecovery.Status != nil {
			f7.Status = resp.PointInTimeRecovery.Status
		}
		ko.Spec.PointInTimeRecovery = f7
	} else {
		ko.Spec.PointInTimeRecovery = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ResourceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ResourceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.SchemaDefinition != nil {
		f9 := &svcapitypes.SchemaDefinition{}
		if resp.SchemaDefinition.AllColumns != nil {
			f9f0 := []*svcapitypes.ColumnDefinition{}
			for _, f9f0iter := range resp.SchemaDefinition.AllColumns {
				f9f0elem := &svcapitypes.ColumnDefinition{}
				if f9f0iter.Name != nil {
					f9f0elem.Name = f9f0iter.Name
				}
				if f9f0iter.Type != nil {
					f9f0elem.Type = f9f0iter.Type
				}
				f9f0 = append(f9f0, f9f0elem)
			}
			f9.AllColumns = f9f0
		}
		if resp.SchemaDefinition.ClusteringKeys != nil {
			f9f1 := []*svcapitypes.ClusteringKey{}
			for _, f9f1iter := range resp.SchemaDefinition.ClusteringKeys {
				f9f1elem := &svcapitypes.ClusteringKey{}
				if f9f1iter.Name != nil {
					f9f1elem.Name = f9f1iter.Name
				}
				if f9f1iter.OrderBy != nil {
					f9f1elem.OrderBy = f9f1iter.OrderBy
				}
				f9f1 = append(f9f1, f9f1elem)
			}
			f9.ClusteringKeys = f9f1
		}
		if resp.SchemaDefinition.PartitionKeys != nil {
			f9f2 := []*svcapitypes.PartitionKey{}
			for _, f9f2iter := range resp.SchemaDefinition.PartitionKeys {
				f9f2elem := &svcapitypes.PartitionKey{}
				if f9f2iter.Name != nil {
					f9f2elem.Name = f9f2iter.Name
				}
				f9f2 = append(f9f2, f9f2elem)
			}
			f9.PartitionKeys = f9f2
		}
		if resp.SchemaDefinition.StaticColumns != nil {
			f9f3 := []*svcapitypes.StaticColumn{}
			for _, f9f3iter := range resp.SchemaDefinition.StaticColumns {
				f9f3elem := &svcapitypes.StaticColumn{}
				if f9f3iter.Name != nil {
					f9f3elem.Name = f9f3iter.Name
				}
				f9f3 = append(f9f3, f9f3elem)
			}
			f9.StaticColumns = f9f3
		}
		ko.Spec.SchemaDefinition = f9
	} else {
		ko.Spec.SchemaDefinition = nil
	}
	if resp.Status != nil {
		ko.Status.Status = resp.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.TableName != nil {
		ko.Spec.TableName = resp.TableName
	} else {
		ko.Spec.TableName = nil
	}
	if resp.Ttl != nil {
		f12 := &svcapitypes.TimeToLive{}
		if resp.Ttl.Status != nil {
			f12.Status = resp.Ttl.Status
		}
		ko.Spec.TTL = f12
	} else {
		ko.Spec.TTL = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.KeyspaceName == nil || r.ko.Spec.TableName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetTableInput, error) {
	res := &svcsdk.GetTableInput{}

	if r.ko.Spec.KeyspaceName != nil {
		res.SetKeyspaceName(*r.ko.Spec.KeyspaceName)
	}
	if r.ko.Spec.TableName != nil {
		res.SetTableName(*r.ko.Spec.TableName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateTableOutput
	_ = resp
	resp, err = rm.sdkapi.CreateTableWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateTable", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ResourceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ResourceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateTableInput, error) {
	res := &svcsdk.CreateTableInput{}

	if r.ko.Spec.CapacitySpecification != nil {
		f0 := &svcsdk.CapacitySpecification{}
		if r.ko.Spec.CapacitySpecification.ReadCapacityUnits != nil {
			f0.SetReadCapacityUnits(*r.ko.Spec.CapacitySpecification.ReadCapacityUnits)
		}
		if r.ko.Spec.CapacitySpecification.ThroughputMode != nil {
			f0.SetThroughputMode(*r.ko.Spec.CapacitySpecification.ThroughputMode)
		}
		if r.ko.Spec.CapacitySpecification.WriteCapacityUnits != nil {
			f0.SetWriteCapacityUnits(*r.ko.Spec.CapacitySpecification.WriteCapacityUnits)
		}
		res.SetCapacitySpecification(f0)
	}
	if r.ko.Spec.ClientSideTimestamps != nil {
		f1 := &svcsdk.ClientSideTimestamps{}
		if r.ko.Spec.ClientSideTimestamps.Status != nil {
			f1.SetStatus(*r.ko.Spec.ClientSideTimestamps.Status)
		}
		res.SetClientSideTimestamps(f1)
	}
	if r.ko.Spec.Comment != nil {
		f2 := &svcsdk.Comment{}
		if r.ko.Spec.Comment.Message != nil {
			f2.SetMessage(*r.ko.Spec.Comment.Message)
		}
		res.SetComment(f2)
	}
	if r.ko.Spec.DefaultTimeToLive != nil {
		res.SetDefaultTimeToLive(*r.ko.Spec.DefaultTimeToLive)
	}
	if r.ko.Spec.EncryptionSpecification != nil {
		f4 := &svcsdk.EncryptionSpecification{}
		if r.ko.Spec.EncryptionSpecification.KMSKeyIdentifier != nil {
			f4.SetKmsKeyIdentifier(*r.ko.Spec.EncryptionSpecification.KMSKeyIdentifier)
		}
		if r.ko.Spec.EncryptionSpecification.Type != nil {
			f4.SetType(*r.ko.Spec.EncryptionSpecification.Type)
		}
		res.SetEncryptionSpecification(f4)
	}
	if r.ko.Spec.KeyspaceName != nil {
		res.SetKeyspaceName(*r.ko.Spec.KeyspaceName)
	}
	if r.ko.Spec.PointInTimeRecovery != nil {
		f6 := &svcsdk.PointInTimeRecovery{}
		if r.ko.Spec.PointInTimeRecovery.Status != nil {
			f6.SetStatus(*r.ko.Spec.PointInTimeRecovery.Status)
		}
		res.SetPointInTimeRecovery(f6)
	}
	if r.ko.Spec.SchemaDefinition != nil {
		f7 := &svcsdk.SchemaDefinition{}
		if r.ko.Spec.SchemaDefinition.AllColumns != nil {
			f7f0 := []*svcsdk.ColumnDefinition{}
			for _, f7f0iter := range r.ko.Spec.SchemaDefinition.AllColumns {
				f7f0elem := &svcsdk.ColumnDefinition{}
				if f7f0iter.Name != nil {
					f7f0elem.SetName(*f7f0iter.Name)
				}
				if f7f0iter.Type != nil {
					f7f0elem.SetType(*f7f0iter.Type)
				}
				f7f0 = append(f7f0, f7f0elem)
			}
			f7.SetAllColumns(f7f0)
		}
		if r.ko.Spec.SchemaDefinition.ClusteringKeys != nil {
			f7f1 := []*svcsdk.ClusteringKey{}
			for _, f7f1iter := range r.ko.Spec.SchemaDefinition.ClusteringKeys {
				f7f1elem := &svcsdk.ClusteringKey{}
				if f7f1iter.Name != nil {
					f7f1elem.SetName(*f7f1iter.Name)
				}
				if f7f1iter.OrderBy != nil {
					f7f1elem.SetOrderBy(*f7f1iter.OrderBy)
				}
				f7f1 = append(f7f1, f7f1elem)
			}
			f7.SetClusteringKeys(f7f1)
		}
		if r.ko.Spec.SchemaDefinition.PartitionKeys != nil {
			f7f2 := []*svcsdk.PartitionKey{}
			for _, f7f2iter := range r.ko.Spec.SchemaDefinition.PartitionKeys {
				f7f2elem := &svcsdk.PartitionKey{}
				if f7f2iter.Name != nil {
					f7f2elem.SetName(*f7f2iter.Name)
				}
				f7f2 = append(f7f2, f7f2elem)
			}
			f7.SetPartitionKeys(f7f2)
		}
		if r.ko.Spec.SchemaDefinition.StaticColumns != nil {
			f7f3 := []*svcsdk.StaticColumn{}
			for _, f7f3iter := range r.ko.Spec.SchemaDefinition.StaticColumns {
				f7f3elem := &svcsdk.StaticColumn{}
				if f7f3iter.Name != nil {
					f7f3elem.SetName(*f7f3iter.Name)
				}
				f7f3 = append(f7f3, f7f3elem)
			}
			f7.SetStaticColumns(f7f3)
		}
		res.SetSchemaDefinition(f7)
	}
	if r.ko.Spec.TableName != nil {
		res.SetTableName(*r.ko.Spec.TableName)
	}
	if r.ko.Spec.Tags != nil {
		f9 := []*svcsdk.Tag{}
		for _, f9iter := range r.ko.Spec.Tags {
			f9elem := &svcsdk.Tag{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetTags(f9)
	}
	if r.ko.Spec.TTL != nil {
		f10 := &svcsdk.TimeToLive{}
		if r.ko.Spec.TTL.Status != nil {
			f10.SetStatus(*r.ko.Spec.TTL.Status)
		}
		res.SetTtl(f10)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateTableOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateTableWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateTable", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ResourceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ResourceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateTableInput, error) {
	res := &svcsdk.UpdateTableInput{}

	if r.ko.Spec.CapacitySpecification != nil {
		f1 := &svcsdk.CapacitySpecification{}
		if r.ko.Spec.CapacitySpecification.ReadCapacityUnits != nil {
			f1.SetReadCapacityUnits(*r.ko.Spec.CapacitySpecification.ReadCapacityUnits)
		}
		if r.ko.Spec.CapacitySpecification.ThroughputMode != nil {
			f1.SetThroughputMode(*r.ko.Spec.CapacitySpecification.ThroughputMode)
		}
		if r.ko.Spec.CapacitySpecification.WriteCapacityUnits != nil {
			f1.SetWriteCapacityUnits(*r.ko.Spec.CapacitySpecification.WriteCapacityUnits)
		}
		res.SetCapacitySpecification(f1)
	}
	if r.ko.Spec.ClientSideTimestamps != nil {
		f2 := &svcsdk.ClientSideTimestamps{}
		if r.ko.Spec.ClientSideTimestamps.Status != nil {
			f2.SetStatus(*r.ko.Spec.ClientSideTimestamps.Status)
		}
		res.SetClientSideTimestamps(f2)
	}
	if r.ko.Spec.DefaultTimeToLive != nil {
		res.SetDefaultTimeToLive(*r.ko.Spec.DefaultTimeToLive)
	}
	if r.ko.Spec.EncryptionSpecification != nil {
		f4 := &svcsdk.EncryptionSpecification{}
		if r.ko.Spec.EncryptionSpecification.KMSKeyIdentifier != nil {
			f4.SetKmsKeyIdentifier(*r.ko.Spec.EncryptionSpecification.KMSKeyIdentifier)
		}
		if r.ko.Spec.EncryptionSpecification.Type != nil {
			f4.SetType(*r.ko.Spec.EncryptionSpecification.Type)
		}
		res.SetEncryptionSpecification(f4)
	}
	if r.ko.Spec.KeyspaceName != nil {
		res.SetKeyspaceName(*r.ko.Spec.KeyspaceName)
	}
	if r.ko.Spec.PointInTimeRecovery != nil {
		f6 := &svcsdk.PointInTimeRecovery{}
		if r.ko.Spec.PointInTimeRecovery.Status != nil {
			f6.SetStatus(*r.ko.Spec.PointInTimeRecovery.Status)
		}
		res.SetPointInTimeRecovery(f6)
	}
	if r.ko.Spec.TableName != nil {
		res.SetTableName(*r.ko.Spec.TableName)
	}
	if r.ko.Spec.TTL != nil {
		f8 := &svcsdk.TimeToLive{}
		if r.ko.Spec.TTL.Status != nil {
			f8.SetStatus(*r.ko.Spec.TTL.Status)
		}
		res.SetTtl(f8)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteTableOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteTableWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteTable", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteTableInput, error) {
	res := &svcsdk.DeleteTableInput{}

	if r.ko.Spec.KeyspaceName != nil {
		res.SetKeyspaceName(*r.ko.Spec.KeyspaceName)
	}
	if r.ko.Spec.TableName != nil {
		res.SetTableName(*r.ko.Spec.TableName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Table,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterException":
		return true
	default:
		return false
	}
}
