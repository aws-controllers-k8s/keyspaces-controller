// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package table

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.CapacitySpecification, b.ko.Spec.CapacitySpecification) {
		delta.Add("Spec.CapacitySpecification", a.ko.Spec.CapacitySpecification, b.ko.Spec.CapacitySpecification)
	} else if a.ko.Spec.CapacitySpecification != nil && b.ko.Spec.CapacitySpecification != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.CapacitySpecification.ReadCapacityUnits, b.ko.Spec.CapacitySpecification.ReadCapacityUnits) {
			delta.Add("Spec.CapacitySpecification.ReadCapacityUnits", a.ko.Spec.CapacitySpecification.ReadCapacityUnits, b.ko.Spec.CapacitySpecification.ReadCapacityUnits)
		} else if a.ko.Spec.CapacitySpecification.ReadCapacityUnits != nil && b.ko.Spec.CapacitySpecification.ReadCapacityUnits != nil {
			if *a.ko.Spec.CapacitySpecification.ReadCapacityUnits != *b.ko.Spec.CapacitySpecification.ReadCapacityUnits {
				delta.Add("Spec.CapacitySpecification.ReadCapacityUnits", a.ko.Spec.CapacitySpecification.ReadCapacityUnits, b.ko.Spec.CapacitySpecification.ReadCapacityUnits)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.CapacitySpecification.ThroughputMode, b.ko.Spec.CapacitySpecification.ThroughputMode) {
			delta.Add("Spec.CapacitySpecification.ThroughputMode", a.ko.Spec.CapacitySpecification.ThroughputMode, b.ko.Spec.CapacitySpecification.ThroughputMode)
		} else if a.ko.Spec.CapacitySpecification.ThroughputMode != nil && b.ko.Spec.CapacitySpecification.ThroughputMode != nil {
			if *a.ko.Spec.CapacitySpecification.ThroughputMode != *b.ko.Spec.CapacitySpecification.ThroughputMode {
				delta.Add("Spec.CapacitySpecification.ThroughputMode", a.ko.Spec.CapacitySpecification.ThroughputMode, b.ko.Spec.CapacitySpecification.ThroughputMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.CapacitySpecification.WriteCapacityUnits, b.ko.Spec.CapacitySpecification.WriteCapacityUnits) {
			delta.Add("Spec.CapacitySpecification.WriteCapacityUnits", a.ko.Spec.CapacitySpecification.WriteCapacityUnits, b.ko.Spec.CapacitySpecification.WriteCapacityUnits)
		} else if a.ko.Spec.CapacitySpecification.WriteCapacityUnits != nil && b.ko.Spec.CapacitySpecification.WriteCapacityUnits != nil {
			if *a.ko.Spec.CapacitySpecification.WriteCapacityUnits != *b.ko.Spec.CapacitySpecification.WriteCapacityUnits {
				delta.Add("Spec.CapacitySpecification.WriteCapacityUnits", a.ko.Spec.CapacitySpecification.WriteCapacityUnits, b.ko.Spec.CapacitySpecification.WriteCapacityUnits)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ClientSideTimestamps, b.ko.Spec.ClientSideTimestamps) {
		delta.Add("Spec.ClientSideTimestamps", a.ko.Spec.ClientSideTimestamps, b.ko.Spec.ClientSideTimestamps)
	} else if a.ko.Spec.ClientSideTimestamps != nil && b.ko.Spec.ClientSideTimestamps != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ClientSideTimestamps.Status, b.ko.Spec.ClientSideTimestamps.Status) {
			delta.Add("Spec.ClientSideTimestamps.Status", a.ko.Spec.ClientSideTimestamps.Status, b.ko.Spec.ClientSideTimestamps.Status)
		} else if a.ko.Spec.ClientSideTimestamps.Status != nil && b.ko.Spec.ClientSideTimestamps.Status != nil {
			if *a.ko.Spec.ClientSideTimestamps.Status != *b.ko.Spec.ClientSideTimestamps.Status {
				delta.Add("Spec.ClientSideTimestamps.Status", a.ko.Spec.ClientSideTimestamps.Status, b.ko.Spec.ClientSideTimestamps.Status)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Comment, b.ko.Spec.Comment) {
		delta.Add("Spec.Comment", a.ko.Spec.Comment, b.ko.Spec.Comment)
	} else if a.ko.Spec.Comment != nil && b.ko.Spec.Comment != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Comment.Message, b.ko.Spec.Comment.Message) {
			delta.Add("Spec.Comment.Message", a.ko.Spec.Comment.Message, b.ko.Spec.Comment.Message)
		} else if a.ko.Spec.Comment.Message != nil && b.ko.Spec.Comment.Message != nil {
			if *a.ko.Spec.Comment.Message != *b.ko.Spec.Comment.Message {
				delta.Add("Spec.Comment.Message", a.ko.Spec.Comment.Message, b.ko.Spec.Comment.Message)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DefaultTimeToLive, b.ko.Spec.DefaultTimeToLive) {
		delta.Add("Spec.DefaultTimeToLive", a.ko.Spec.DefaultTimeToLive, b.ko.Spec.DefaultTimeToLive)
	} else if a.ko.Spec.DefaultTimeToLive != nil && b.ko.Spec.DefaultTimeToLive != nil {
		if *a.ko.Spec.DefaultTimeToLive != *b.ko.Spec.DefaultTimeToLive {
			delta.Add("Spec.DefaultTimeToLive", a.ko.Spec.DefaultTimeToLive, b.ko.Spec.DefaultTimeToLive)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EncryptionSpecification, b.ko.Spec.EncryptionSpecification) {
		delta.Add("Spec.EncryptionSpecification", a.ko.Spec.EncryptionSpecification, b.ko.Spec.EncryptionSpecification)
	} else if a.ko.Spec.EncryptionSpecification != nil && b.ko.Spec.EncryptionSpecification != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.EncryptionSpecification.KMSKeyIdentifier, b.ko.Spec.EncryptionSpecification.KMSKeyIdentifier) {
			delta.Add("Spec.EncryptionSpecification.KMSKeyIdentifier", a.ko.Spec.EncryptionSpecification.KMSKeyIdentifier, b.ko.Spec.EncryptionSpecification.KMSKeyIdentifier)
		} else if a.ko.Spec.EncryptionSpecification.KMSKeyIdentifier != nil && b.ko.Spec.EncryptionSpecification.KMSKeyIdentifier != nil {
			if *a.ko.Spec.EncryptionSpecification.KMSKeyIdentifier != *b.ko.Spec.EncryptionSpecification.KMSKeyIdentifier {
				delta.Add("Spec.EncryptionSpecification.KMSKeyIdentifier", a.ko.Spec.EncryptionSpecification.KMSKeyIdentifier, b.ko.Spec.EncryptionSpecification.KMSKeyIdentifier)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EncryptionSpecification.Type, b.ko.Spec.EncryptionSpecification.Type) {
			delta.Add("Spec.EncryptionSpecification.Type", a.ko.Spec.EncryptionSpecification.Type, b.ko.Spec.EncryptionSpecification.Type)
		} else if a.ko.Spec.EncryptionSpecification.Type != nil && b.ko.Spec.EncryptionSpecification.Type != nil {
			if *a.ko.Spec.EncryptionSpecification.Type != *b.ko.Spec.EncryptionSpecification.Type {
				delta.Add("Spec.EncryptionSpecification.Type", a.ko.Spec.EncryptionSpecification.Type, b.ko.Spec.EncryptionSpecification.Type)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KeyspaceName, b.ko.Spec.KeyspaceName) {
		delta.Add("Spec.KeyspaceName", a.ko.Spec.KeyspaceName, b.ko.Spec.KeyspaceName)
	} else if a.ko.Spec.KeyspaceName != nil && b.ko.Spec.KeyspaceName != nil {
		if *a.ko.Spec.KeyspaceName != *b.ko.Spec.KeyspaceName {
			delta.Add("Spec.KeyspaceName", a.ko.Spec.KeyspaceName, b.ko.Spec.KeyspaceName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PointInTimeRecovery, b.ko.Spec.PointInTimeRecovery) {
		delta.Add("Spec.PointInTimeRecovery", a.ko.Spec.PointInTimeRecovery, b.ko.Spec.PointInTimeRecovery)
	} else if a.ko.Spec.PointInTimeRecovery != nil && b.ko.Spec.PointInTimeRecovery != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.PointInTimeRecovery.Status, b.ko.Spec.PointInTimeRecovery.Status) {
			delta.Add("Spec.PointInTimeRecovery.Status", a.ko.Spec.PointInTimeRecovery.Status, b.ko.Spec.PointInTimeRecovery.Status)
		} else if a.ko.Spec.PointInTimeRecovery.Status != nil && b.ko.Spec.PointInTimeRecovery.Status != nil {
			if *a.ko.Spec.PointInTimeRecovery.Status != *b.ko.Spec.PointInTimeRecovery.Status {
				delta.Add("Spec.PointInTimeRecovery.Status", a.ko.Spec.PointInTimeRecovery.Status, b.ko.Spec.PointInTimeRecovery.Status)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SchemaDefinition, b.ko.Spec.SchemaDefinition) {
		delta.Add("Spec.SchemaDefinition", a.ko.Spec.SchemaDefinition, b.ko.Spec.SchemaDefinition)
	} else if a.ko.Spec.SchemaDefinition != nil && b.ko.Spec.SchemaDefinition != nil {
		if len(a.ko.Spec.SchemaDefinition.AllColumns) != len(b.ko.Spec.SchemaDefinition.AllColumns) {
			delta.Add("Spec.SchemaDefinition.AllColumns", a.ko.Spec.SchemaDefinition.AllColumns, b.ko.Spec.SchemaDefinition.AllColumns)
		} else if len(a.ko.Spec.SchemaDefinition.AllColumns) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.SchemaDefinition.AllColumns, b.ko.Spec.SchemaDefinition.AllColumns) {
				delta.Add("Spec.SchemaDefinition.AllColumns", a.ko.Spec.SchemaDefinition.AllColumns, b.ko.Spec.SchemaDefinition.AllColumns)
			}
		}
		if len(a.ko.Spec.SchemaDefinition.ClusteringKeys) != len(b.ko.Spec.SchemaDefinition.ClusteringKeys) {
			delta.Add("Spec.SchemaDefinition.ClusteringKeys", a.ko.Spec.SchemaDefinition.ClusteringKeys, b.ko.Spec.SchemaDefinition.ClusteringKeys)
		} else if len(a.ko.Spec.SchemaDefinition.ClusteringKeys) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.SchemaDefinition.ClusteringKeys, b.ko.Spec.SchemaDefinition.ClusteringKeys) {
				delta.Add("Spec.SchemaDefinition.ClusteringKeys", a.ko.Spec.SchemaDefinition.ClusteringKeys, b.ko.Spec.SchemaDefinition.ClusteringKeys)
			}
		}
		if len(a.ko.Spec.SchemaDefinition.PartitionKeys) != len(b.ko.Spec.SchemaDefinition.PartitionKeys) {
			delta.Add("Spec.SchemaDefinition.PartitionKeys", a.ko.Spec.SchemaDefinition.PartitionKeys, b.ko.Spec.SchemaDefinition.PartitionKeys)
		} else if len(a.ko.Spec.SchemaDefinition.PartitionKeys) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.SchemaDefinition.PartitionKeys, b.ko.Spec.SchemaDefinition.PartitionKeys) {
				delta.Add("Spec.SchemaDefinition.PartitionKeys", a.ko.Spec.SchemaDefinition.PartitionKeys, b.ko.Spec.SchemaDefinition.PartitionKeys)
			}
		}
		if len(a.ko.Spec.SchemaDefinition.StaticColumns) != len(b.ko.Spec.SchemaDefinition.StaticColumns) {
			delta.Add("Spec.SchemaDefinition.StaticColumns", a.ko.Spec.SchemaDefinition.StaticColumns, b.ko.Spec.SchemaDefinition.StaticColumns)
		} else if len(a.ko.Spec.SchemaDefinition.StaticColumns) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.SchemaDefinition.StaticColumns, b.ko.Spec.SchemaDefinition.StaticColumns) {
				delta.Add("Spec.SchemaDefinition.StaticColumns", a.ko.Spec.SchemaDefinition.StaticColumns, b.ko.Spec.SchemaDefinition.StaticColumns)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TableName, b.ko.Spec.TableName) {
		delta.Add("Spec.TableName", a.ko.Spec.TableName, b.ko.Spec.TableName)
	} else if a.ko.Spec.TableName != nil && b.ko.Spec.TableName != nil {
		if *a.ko.Spec.TableName != *b.ko.Spec.TableName {
			delta.Add("Spec.TableName", a.ko.Spec.TableName, b.ko.Spec.TableName)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TTL, b.ko.Spec.TTL) {
		delta.Add("Spec.TTL", a.ko.Spec.TTL, b.ko.Spec.TTL)
	} else if a.ko.Spec.TTL != nil && b.ko.Spec.TTL != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.TTL.Status, b.ko.Spec.TTL.Status) {
			delta.Add("Spec.TTL.Status", a.ko.Spec.TTL.Status, b.ko.Spec.TTL.Status)
		} else if a.ko.Spec.TTL.Status != nil && b.ko.Spec.TTL.Status != nil {
			if *a.ko.Spec.TTL.Status != *b.ko.Spec.TTL.Status {
				delta.Add("Spec.TTL.Status", a.ko.Spec.TTL.Status, b.ko.Spec.TTL.Status)
			}
		}
	}

	return delta
}
