// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TypeSpec defines the desired state of Type.
type TypeSpec struct {

	// The field definitions, consisting of names and types, that define this type.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	FieldDefinitions []*FieldDefinition `json:"fieldDefinitions"`
	// The name of the keyspace.
	// +kubebuilder:validation:Required
	KeyspaceName *string `json:"keyspaceName"`
	// The name of the user-defined type.
	//
	// UDT names must contain 48 characters or less, must begin with an alphabetic
	// character, and can only contain alpha-numeric characters and underscores.
	// Amazon Keyspaces converts upper case characters automatically into lower
	// case characters.
	//
	// Alternatively, you can declare a UDT name in double quotes. When declaring
	// a UDT name inside double quotes, Amazon Keyspaces preserves upper casing
	// and allows special characters.
	//
	// You can also use double quotes as part of the name when you create the UDT,
	// but you must escape each double quote character with an additional double
	// quote character.
	// +kubebuilder:validation:Required
	TypeName *string `json:"typeName"`
}

// TypeStatus defines the observed state of Type
type TypeStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The unique identifier of the keyspace that contains the new type in the format
	// of an Amazon Resource Name (ARN).
	// +kubebuilder:validation:Optional
	KeyspaceARN *string `json:"keyspaceARN,omitempty"`
}

// Type is the Schema for the Types API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Type struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TypeSpec   `json:"spec,omitempty"`
	Status            TypeStatus `json:"status,omitempty"`
}

// TypeList contains a list of Type
// +kubebuilder:object:root=true
type TypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Type `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Type{}, &TypeList{})
}
